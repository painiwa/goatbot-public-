const fs = require("fs-extra");
const { utils } = global;

module.exports = {
  config: {
    name: "prefix",
    aliases: ["üåö"],
    version: "1.3",
    author: "messie osango",
    countDown: 5,
    role: 0,
    shortDescription: "Changer le pr√©fixe du bot",
    longDescription: "Change le symbole de commande du bot dans votre bo√Æte de discussion ou dans tout le syst√®me du bot (admin uniquement)",
    category: "box chat",
    guide: {
      fr:
        "   {pn} <nouveau pr√©fixe>: changer le pr√©fixe dans votre bo√Æte de discussion" +
        "\n   Exemple:" +
        "\n    {pn} #" +
        "\n\n   {pn} <nouveau pr√©fixe> -g: changer le pr√©fixe dans le syst√®me du bot (admin bot uniquement)" +
        "\n   Exemple:" +
        "\n    {pn} # -g" +
        "\n\n   {pn} reset: r√©initialiser le pr√©fixe dans votre bo√Æte de discussion"
    }
  },

  langs: {
    fr: {
      reset: "‚ú® Votre pr√©fixe a √©t√© r√©initialis√© par d√©faut: %1",
      onlyAdmin: "‚ö†Ô∏è Seuls les administrateurs peuvent changer le pr√©fixe du syst√®me",
      confirmGlobal: "üîî Veuillez r√©agir √† ce message pour confirmer le changement de pr√©fixe du syst√®me",
      confirmThisThread: "üí¨ Veuillez r√©agir √† ce message pour confirmer le changement de pr√©fixe dans votre discussion",
      successGlobal: "‚úÖ Pr√©fixe du syst√®me chang√© avec succ√®s: %1",
      successThisThread: "‚úÖ Pr√©fixe chang√© avec succ√®s dans votre discussion: %1"
    }
  },

  onStart: async function ({ message, role, args, event, threadsData, getLang }) {
    if (!args[0]) return message.SyntaxError();
    const newPrefix = args[0];
    const isGlobal = args.includes("-g");

    if (args[0] === "reset") {
      await threadsData.set(event.threadID, null, "data.prefix");
      return message.reply(getLang("reset", global.GoatBot.config.prefix));
    }

    if (isGlobal) {
      if (role < 2) return message.reply(getLang("onlyAdmin"));
      return message.reply({
        body: getLang("confirmGlobal"),
        reaction: {
          author: event.userID,
          newPrefix,
          setGlobal: true
        }
      });
    } else {
      return message.reply({
        body: getLang("confirmThisThread"),
        reaction: {
          author: event.userID,
          newPrefix,
          setGlobal: false
        }
      });
    }
  },

  onReaction: async function ({ message, threadsData, event, Reaction, getLang }) {
    const { author, newPrefix, setGlobal } = Reaction;
    if (event.userID !== author) return;

    if (setGlobal) {
      global.GoatBot.config.prefix = newPrefix;
      fs.writeFileSync(global.client.dirConfig, JSON.stringify(global.GoatBot.config, null, 2));
      return message.reply(getLang("successGlobal", newPrefix));
    } else {
      await threadsData.set(event.threadID, newPrefix, "data.prefix");
      return message.reply(getLang("successThisThread", newPrefix));
    }
  },

  onChat: async function ({ event, message }) {
    if (event.body && (event.body.toLowerCase() === "prefix" || event.body.toLowerCase() === "üåö")) {
      const sysPrefix = global.GoatBot.config.prefix;
      const boxPrefix = await utils.getPrefix(event.threadID);
      return message.reply(
        "‚ï≠‚îÅ[ùë∂ùë™ùëªùë®ùë©ùë∂ùëª]‚îÅ‚îÅ‚ïÆ\n" +
        `‚îÉ ùôøùöõùöéÃÅùöèùöíùö°ùöé ùöúùö¢ùöúùöùùöéÃÄùöñùöé : ${sysPrefix}\n` +
        "‚îÉ\n" +
        `‚îÉ ùôøùöõùöéÃÅùöèùöíùö°ùöé ùöçùöé ùöïùöä ùöãùöòùö° : ${boxPrefix}\n` +
        "‚îÉ\n" +
        `‚îÉ ùöÑùöùùöíùöïùöíùöúùöéùö£ ${boxPrefix}help ùöôùöòùöûùöõ ùöüùöòùöíùöõ ùöùùöòùöûùöùùöéùöú ùöïùöéùöú ùöåùöòùöñùöñùöäùöóùöçùöéùöú\n` +
        "‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ"
      );
    }
  }
};
