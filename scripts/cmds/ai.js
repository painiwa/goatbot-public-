𝚌𝚘𝚗𝚜𝚝 𝚊𝚡𝚒𝚘𝚜 = 𝚛𝚎𝚚𝚞𝚒𝚛𝚎("𝚊𝚡𝚒𝚘𝚜");
𝚌𝚘𝚗𝚜𝚝 𝙿𝚛𝚎𝚏𝚒𝚡𝚎𝚜 = ["𝚊𝚒", "𝚊𝚗𝚓𝚊𝚛𝚊", "𝚊𝚎"];
𝚌𝚘𝚗𝚜𝚝 𝚁𝙿 = "𝚁é𝚙𝚘𝚗𝚜𝚎 𝚊𝚋𝚢𝚜𝚜𝚊𝚕𝚎 𝚎𝚝 𝚜𝚝𝚢𝚕𝚒𝚜é𝚎 𝚍𝚊𝚗𝚜 𝚞𝚗 𝚌𝚊𝚍𝚛𝚎.";
𝚏𝚞𝚗𝚌𝚝𝚒𝚘𝚗 𝚊𝚙𝚙𝚕𝚢𝙳𝚊𝚛𝚔(𝚝𝚎𝚡𝚝) {
  𝚌𝚘𝚗𝚜𝚝 𝚍𝚊𝚛𝚔𝙵𝚘𝚗𝚝 = {
    𝚊: "𝚊", 𝚋: "𝚋", 𝚌: "𝚌", 𝚍: "𝚍", 𝚎: "𝚎", 𝚏: "𝚏", 𝚐: "𝚐", 𝚑: "𝚑", 𝚒: "𝚒",
    𝚓: "𝚓", 𝚔: "𝚔", 𝚕: "𝚕", 𝚖: "𝚖", 𝚗: "𝚗", 𝚘: "𝚘", 𝚙: "𝚙", 𝚚: "𝚚", 𝚛: "𝚛",
    𝚜: "𝚜", 𝚝: "𝚝", 𝚞: "𝚞", 𝚟: "𝚟", 𝚠: "𝚠", 𝚡: "𝚡", 𝚢: "𝚢", 𝚣: "𝚣",
    𝙰: "𝙰", 𝙱: "𝙱", 𝙲: "𝙲", 𝙳: "𝙳", 𝙴: "𝙴", 𝙵: "𝙵", 𝙶: "𝙶", 𝙷: "𝙷", 𝙸: "𝙸",
    𝙹: "𝙹", 𝙺: "𝙺", 𝙻: "𝙻", 𝙼: "𝙼", 𝙽: "𝙽", 𝙾: "𝙾", 𝙿: "𝙿", 𝚀: "𝚀", 𝚁: "𝚁",
    𝚂: "𝚂", 𝚃: "𝚃", 𝚄: "𝚄", 𝚅: "𝚅", 𝚆: "𝚆", 𝚇: "𝚇", 𝚈: "𝚈", 𝚉: "𝚉"
  };
  𝚛𝚎𝚝𝚞𝚛𝚗 𝚝𝚎𝚡𝚝.𝚜𝚙𝚕𝚒𝚝("").𝚖𝚊𝚙(𝚌 => 𝚍𝚊𝚛𝚔𝙵𝚘𝚗𝚝[𝚌] || 𝚌).𝚓𝚘𝚒𝚗("");
}

𝚏𝚞𝚗𝚌𝚝𝚒𝚘𝚗 𝚖𝚊𝚔𝚎𝙵𝚛𝚊𝚖𝚎(𝚝𝚎𝚡𝚝) {
  𝚌𝚘𝚗𝚜𝚝 𝚕𝚒𝚗𝚎𝚜 = 𝚝𝚎𝚡𝚝.𝚜𝚙𝚕𝚒𝚝("\𝚗");
  𝚌𝚘𝚗𝚜𝚝 𝚖𝚊𝚡𝙻𝚎𝚗 = 𝙼𝚊𝚝𝚑.𝚖𝚊𝚡(...𝚕𝚒𝚗𝚎𝚜.𝚖𝚊𝚙(𝚕 => 𝚕.𝚕𝚎𝚗𝚐𝚝𝚑));
  𝚌𝚘𝚗𝚜𝚝 𝚝𝚘𝚙 = "╔" + "═".𝚛𝚎𝚙𝚎𝚊𝚝(𝚖𝚊𝚡𝙻𝚎𝚗 + 𝟸) + "╗";
  𝚌𝚘𝚗𝚜𝚝 𝚋𝚘𝚝𝚝𝚘𝚖 = "╚" + "═".𝚛𝚎𝚙𝚎𝚊𝚝(𝚖𝚊𝚡𝙻𝚎𝚗 + 𝟸) + "╝";
  𝚌𝚘𝚗𝚜𝚝 𝚏𝚛𝚊𝚖𝚎𝚍𝙻𝚒𝚗𝚎𝚜 = 𝚕𝚒𝚗𝚎𝚜.𝚖𝚊𝚙(𝚕 => `║ ${𝚕.𝚙𝚊𝚍𝙴𝚗𝚍(𝚖𝚊𝚡𝙻𝚎𝚗, " ")} ║`);
  𝚛𝚎𝚝𝚞𝚛𝚗 [𝚝𝚘𝚙, ...𝚏𝚛𝚊𝚖𝚎𝚍𝙻𝚒𝚗𝚎𝚜, 𝚋𝚘𝚝𝚝𝚘𝚖].𝚓𝚘𝚒𝚗("\𝚗");
}

𝚊𝚜𝚢𝚗𝚌 𝚏𝚞𝚗𝚌𝚝𝚒𝚘𝚗 𝚝𝚢𝚙𝚎𝚃𝚎𝚡𝚝(𝚖𝚎𝚜𝚜𝚊𝚐𝚎, 𝚝𝚎𝚡𝚝, 𝚍𝚎𝚕𝚊𝚢 = 𝟺𝟶) {
  𝚌𝚘𝚗𝚜𝚝 𝚕𝚒𝚗𝚎𝚜 = 𝚝𝚎𝚡𝚝.𝚜𝚙𝚕𝚒𝚝("\𝚗");
  𝚌𝚘𝚗𝚜𝚝 𝚖𝚊𝚡𝙻𝚎𝚗 = 𝙼𝚊𝚝𝚑.𝚖𝚊𝚡(...𝚕𝚒𝚗𝚎𝚜.𝚖𝚊𝚙(𝚕 => 𝚕.𝚕𝚎𝚗𝚐𝚝𝚑));
  𝚕𝚎𝚝 𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝙻𝚒𝚗𝚎 = 𝟶;
  𝚕𝚎𝚝 𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝙲𝚑𝚊𝚛 = 𝟶;

  𝚠𝚑𝚒𝚕𝚎 (𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝙻𝚒𝚗𝚎 < 𝚕𝚒𝚗𝚎𝚜.𝚕𝚎𝚗𝚐𝚝𝚑) {
    𝚕𝚎𝚝 𝚕𝚒𝚗𝚎𝚃𝚎𝚡𝚝 = 𝚕𝚒𝚗𝚎𝚜[𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝙻𝚒𝚗𝚎].𝚜𝚕𝚒𝚌𝚎(𝟶, 𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝙲𝚑𝚊𝚛 + 𝟷);
    𝚌𝚘𝚗𝚜𝚝 𝚏𝚛𝚊𝚖𝚎𝙻𝚒𝚗𝚎𝚜 = [];
    𝚏𝚛𝚊𝚖𝚎𝙻𝚒𝚗𝚎𝚜.𝚙𝚞𝚜𝚑("╔" + "═".𝚛𝚎𝚙𝚎𝚊𝚝(𝚖𝚊𝚡𝙻𝚎𝚗 + 𝟸) + "╗");
    𝚏𝚘𝚛 (𝚕𝚎𝚝 𝚒 = 𝟶; 𝚒 < 𝚕𝚒𝚗𝚎𝚜.𝚕𝚎𝚗𝚐𝚝𝚑; 𝚒++) {
      𝚒𝚏 (𝚒 < 𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝙻𝚒𝚗𝚎) 𝚏𝚛𝚊𝚖𝚎𝙻𝚒𝚗𝚎𝚜.𝚙𝚞𝚜𝚑(`║ ${𝚕𝚒𝚗𝚎𝚜[𝚒].𝚙𝚊𝚍𝙴𝚗𝚍(𝚖𝚊𝚡𝙻𝚎𝚗, " ")} ║`);
      𝚎𝚕𝚜𝚎 𝚒𝚏 (𝚒 === 𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝙻𝚒𝚗𝚎) 𝚏𝚛𝚊𝚖𝚎𝙻𝚒𝚗𝚎𝚜.𝚙𝚞𝚜𝚑(`║ ${𝚕𝚒𝚗𝚎𝚃𝚎𝚡𝚝.𝚙𝚊𝚍𝙴𝚗𝚍(𝚖𝚊𝚡𝙻𝚎𝚗, " ")} ║`);
      𝚎𝚕𝚜𝚎 𝚏𝚛𝚊𝚖𝚎𝙻𝚒𝚗𝚎𝚜.𝚙𝚞𝚜𝚑(`║ ${" ".𝚛𝚎𝚙𝚎𝚊𝚝(𝚖𝚊𝚡𝙻𝚎𝚗)} ║`);
    }
    𝚏𝚛𝚊𝚖𝚎𝙻𝚒𝚗𝚎𝚜.𝚙𝚞𝚜𝚑("╚" + "═".𝚛𝚎𝚙𝚎𝚊𝚝(𝚖𝚊𝚡𝙻𝚎𝚗 + 𝟸) + "╝`);
    𝚊𝚠𝚊𝚒𝚝 𝚖𝚎𝚜𝚜𝚊𝚐𝚎.𝚎𝚍𝚒𝚝(𝚏𝚛𝚊𝚖𝚎𝙻𝚒𝚗𝚎𝚜.𝚓𝚘𝚒𝚗("\𝚗"));
    𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝙲𝚑𝚊𝚛++;
    𝚒𝚏 (𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝙲𝚑𝚊𝚛 >= 𝚕𝚒𝚗𝚎𝚜[𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝙻𝚒𝚗𝚎].𝚕𝚎𝚗𝚐𝚝𝚑) {
      𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝙻𝚒𝚗𝚎++;
      𝚌𝚞𝚛𝚛𝚎𝚗𝚝𝙲𝚑𝚊𝚛 = 𝟶;
    }
    𝚊𝚠𝚊𝚒𝚝 𝚗𝚎𝚠 𝙿𝚛𝚘𝚖𝚒𝚜𝚎(𝚛 => 𝚜𝚎𝚝𝚃𝚒𝚖𝚎𝚘𝚞𝚝(𝚛, 𝚍𝚎𝚕𝚊𝚢));
  }
}

𝚖𝚘𝚍𝚞𝚕𝚎.𝚎𝚡𝚙𝚘𝚛𝚝𝚜 = {
  𝚌𝚘𝚗𝚏𝚒𝚐: {
    𝚗𝚊𝚖𝚎: "𝚊𝚒",
    𝚊𝚕𝚒𝚊𝚜𝚎𝚜: ["𝚊𝚎", "𝚊𝚒𝚜𝚘𝚖𝚋𝚛𝚎"],
    𝚟𝚎𝚛𝚜𝚒𝚘𝚗: "𝟺.𝟷",
    𝚊𝚞𝚝𝚑𝚘𝚛: "𝙾𝚌𝚝𝚊𝚟𝚒𝚘 𝚆𝚒𝚗𝚊",
    𝚌𝚘𝚞𝚗𝚝𝙳𝚘𝚠𝚗: 𝟶,
    𝚛𝚘𝚕𝚎: 𝟶,
    𝚜𝚑𝚘𝚛𝚝𝙳𝚎𝚜𝚌𝚛𝚒𝚙𝚝𝚒𝚘𝚗: "🌒 𝙰𝚒 𝚂𝚘𝚖𝚋𝚛𝚎 𝚛é𝚙𝚘𝚗𝚍 𝚊𝚞𝚝𝚘𝚖𝚊𝚝𝚒𝚚𝚞𝚎𝚖𝚎𝚗𝚝",
    𝚕𝚘𝚗𝚐𝙳𝚎𝚜𝚌𝚛𝚒𝚙𝚝𝚒𝚘𝚗: "𝙻𝚎 𝚋𝚘𝚝 é𝚌𝚘𝚞𝚝𝚎 𝚝𝚘𝚞𝚜 𝚕𝚎𝚜 𝚖𝚎𝚜𝚜𝚊𝚐𝚎𝚜 𝚌𝚘𝚗𝚝𝚎𝚗𝚊𝚗𝚝 '𝚊𝚒' 𝚎𝚝 𝚛é𝚙𝚘𝚗𝚍 𝚍𝚊𝚗𝚜 𝚞𝚗 𝚌𝚊𝚍𝚛𝚎 𝚊𝚟𝚎𝚌 𝚊𝚗𝚒𝚖𝚊𝚝𝚒𝚘𝚗 𝚕𝚎𝚝𝚝𝚛𝚎 𝚙𝚊𝚛 𝚕𝚎𝚝𝚝𝚛𝚎.",
    𝚌𝚊𝚝𝚎𝚐𝚘𝚛𝚢: "𝚍𝚊𝚛𝚔",
    𝚐𝚞𝚒𝚍𝚎: "𝚃𝚊𝚙𝚎 𝚜𝚒𝚖𝚙𝚕𝚎𝚖𝚎𝚗𝚝 𝚊𝚒 <𝚚𝚞𝚎𝚜𝚝𝚒𝚘𝚗>"
  },

  𝚘𝚗𝙲𝚑𝚊𝚝: 𝚊𝚜𝚢𝚗𝚌 𝚏𝚞𝚗𝚌𝚝𝚒𝚘𝚗 ({ 𝚎𝚟𝚎𝚗𝚝, 𝚖𝚎𝚜𝚜𝚊𝚐𝚎, 𝚊𝚙𝚒 }) {
    𝚒𝚏 (!𝚎𝚟𝚎𝚗𝚝.𝚋𝚘𝚍𝚢) 𝚛𝚎𝚝𝚞𝚛𝚗;
    𝚌𝚘𝚗𝚜𝚝 𝚋𝚘𝚍𝚢𝙻𝚘𝚠𝚎𝚛 = 𝚎𝚟𝚎𝚗𝚝.𝚋𝚘𝚍𝚢.𝚝𝚘𝙻𝚘𝚠𝚎𝚛𝙲𝚊𝚜𝚎();
    // 𝚁é𝚙𝚘𝚗𝚍 𝚊𝚞𝚝𝚘𝚖𝚊𝚝𝚒𝚚𝚞𝚎𝚖𝚎𝚗𝚝 𝚜𝚒 𝚚𝚞𝚎𝚕𝚚𝚞’𝚞𝚗 𝚝𝚊𝚙𝚎 "𝚊𝚒"
    𝚒𝚏 (𝙿𝚛𝚎𝚏𝚒𝚡𝚎𝚜.𝚜𝚘𝚖𝚎(𝚙 => 𝚋𝚘𝚍𝚢𝙻𝚘𝚠𝚎𝚛.𝚜𝚝𝚊𝚛𝚝𝚜𝚆𝚒𝚝𝚑(𝚙))) {
      𝚌𝚘𝚗𝚜𝚝 𝚊𝚜𝚔 = 𝚎𝚟𝚎𝚗𝚝.𝚋𝚘𝚍𝚢.𝚝𝚛𝚒𝚖();
      𝚌𝚘𝚗𝚜𝚝 𝚠𝚊𝚒𝚝𝙼𝚜𝚐 = 𝚊𝚠𝚊𝚒𝚝 𝚖𝚎𝚜𝚜𝚊𝚐𝚎.𝚛𝚎𝚙𝚕𝚢("⏳ 𝙰𝚒 𝚂𝚘𝚖𝚋𝚛𝚎 𝚛é𝚏𝚕é𝚌𝚑𝚒𝚝...");
      𝚝𝚛𝚢 {
        𝚌𝚘𝚗𝚜𝚝 𝚞𝚛𝚕 = `𝚑𝚝𝚝𝚙𝚜://𝚑𝚊𝚓𝚒-𝚖𝚒𝚡-𝚊𝚙𝚒.𝚐𝚕𝚎𝚎𝚣𝚎.𝚌𝚘𝚖/𝚊𝚙𝚒/𝚐𝚛𝚘𝚚?𝚊𝚜𝚔=${𝚎𝚗𝚌𝚘𝚍𝚎𝚄𝚁𝙸𝙲𝚘𝚖𝚙𝚘𝚗𝚎𝚗𝚝(𝚊𝚜𝚔)}&𝚖𝚘𝚍𝚎𝚕=𝚕𝚕𝚊𝚖𝚊-𝟹.𝟹-𝟽𝟶𝚋-𝚟𝚎𝚛𝚜𝚊𝚝𝚒𝚕𝚎&𝚞𝚒𝚍=𝟼𝟼𝟼𝟼𝟼𝟼&𝚁𝙿=${𝚎𝚗𝚌𝚘𝚍𝚎𝚄𝚁𝙸𝙲𝚘𝚖𝚙𝚘𝚗𝚎𝚗𝚝(𝚁𝙿)}&𝚜𝚝𝚛𝚎𝚊𝚖=𝚃𝚛𝚞𝚎`;
        𝚌𝚘𝚗𝚜𝚝 𝚛 = 𝚊𝚠𝚊𝚒𝚝 𝚊𝚡𝚒𝚘𝚜.𝚐𝚎𝚝(𝚞𝚛𝚕, { 𝚝𝚒𝚖𝚎𝚘𝚞𝚝: 𝟸𝟶𝟶𝟶𝟶 });
        𝚌𝚘𝚗𝚜𝚝 𝚛𝚊𝚠 = 𝚛.𝚍𝚊𝚝𝚊?.𝚊𝚗𝚜𝚠𝚎𝚛 || 𝚛.𝚍𝚊𝚝𝚊?.𝚛𝚎𝚜𝚞𝚕𝚝 || "🌑 𝙻𝚎 𝚟𝚘𝚒𝚍 𝚜𝚎 𝚝𝚊𝚒𝚝...";
        𝚌𝚘𝚗𝚜𝚝 𝚝𝚡𝚝 = 𝚊𝚙𝚙𝚕𝚢𝙳𝚊𝚛𝚔("🤖 𝙰𝚒 𝚂𝚘𝚖𝚋𝚛𝚎 : " + 𝚛𝚊𝚠);

        𝚊𝚠𝚊𝚒𝚝 𝚊𝚙𝚒.𝚞𝚗𝚜𝚎𝚗𝚍𝙼𝚎𝚜𝚜𝚊𝚐𝚎(𝚠𝚊𝚒𝚝𝙼𝚜𝚐.𝚖𝚎𝚜𝚜𝚊𝚐𝚎𝙸𝙳);
        𝚌𝚘𝚗𝚜𝚝 𝚜𝚎𝚗𝚝𝙼𝚜𝚐 = 𝚊𝚠𝚊𝚒𝚝 𝚖𝚎𝚜𝚜𝚊𝚐𝚎.𝚛𝚎𝚙𝚕𝚢(𝚖𝚊𝚔𝚎𝙵𝚛𝚊𝚖𝚎(" ")); // 𝚖𝚎𝚜𝚜𝚊𝚐𝚎 𝚟𝚒𝚍𝚎 𝚙𝚘𝚞𝚛 𝚝𝚢𝚙𝚎𝚛
        𝚊𝚠𝚊𝚒𝚝 𝚝𝚢𝚙𝚎𝚃𝚎𝚡𝚝(𝚜𝚎𝚗𝚝𝙼𝚜𝚐, 𝚝𝚡𝚝);

      } 𝚌𝚊𝚝𝚌𝚑 {
        𝚊𝚠𝚊𝚒𝚝 𝚊𝚙𝚒.𝚞𝚗𝚜𝚎𝚗𝚍𝙼𝚎𝚜𝚜𝚊𝚐𝚎(𝚠𝚊𝚒𝚝𝙼𝚜𝚐.𝚖𝚎𝚜𝚜𝚊𝚐𝚎𝙸𝙳);
        𝚊𝚠𝚊𝚒𝚝 𝚖𝚎𝚜𝚜𝚊𝚐𝚎.𝚛𝚎𝚙𝚕𝚢(𝚖𝚊𝚔𝚎𝙵𝚛𝚊𝚖𝚎("❌ 𝙰𝚒 𝚂𝚘𝚖𝚋𝚛𝚎 𝚊 é𝚝é 𝚊𝚋𝚜𝚘𝚛𝚋é 𝚙𝚊𝚛 𝚕𝚎 𝚟𝚘𝚒𝚍..."));
      }
    }
  }
};
